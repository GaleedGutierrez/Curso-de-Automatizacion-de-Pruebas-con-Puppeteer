/* eslint-disable no-use-before-define */
// Generated by https://quicktype.io
//
// To change quicktype's target language, run command:
//
//   "Set quicktype target language"

export interface Profile {
	traceEvents: TraceEvent[];
	metadata: Metadata;
}
export interface Metadata {
	'chrome-bitness': number;
	'clock-domain': string;
	command_line: string;
	'cpu-brand': string;
	'cpu-family': number;
	'cpu-model': number;
	'cpu-stepping': number;
	'gpu-devid': number;
	'gpu-driver': string;
	'gpu-features': Record<string, string>;
	'gpu-psver': string;
	'gpu-venid': number;
	'gpu-vsver': string;
	'highres-ticks': number;
	'module-apphelp': string;
	'network-type': string;
	'num-cpus': number;
	'os-arch': string;
	'os-name': string;
	'os-session': string;
	'os-version': string;
	'os-wow64': string;
	'physical-memory': number;
	'product-version': string;
	revision: string;
	'trace-capture-datetime': string;
	'trace-config': string;
	trace_processor_stats: TraceProcessorStats;
	'user-agent': string;
	'v8-version': string;
}
export interface TraceProcessorStats {
	android_br_parse_errors: number;
	android_log_format_invalid: number;
	android_log_num_failed: number;
	android_log_num_skipped: number;
	android_log_num_total: number;
	atom_timestamp_missing: number;
	atom_unknown: number;
	clock_sync_cache_miss: number;
	clock_sync_failure: number;
	compact_sched_has_parse_errors: number;
	compact_sched_switch_skipped: number;
	compact_sched_waking_skipped: number;
	counter_events_out_of_order: number;
	deobfuscate_location_parse_error: number;
	empty_chrome_metadata: number;
	energy_breakdown_missing_values: number;
	energy_descriptor_invalid: number;
	energy_uid_breakdown_missing_values: number;
	entity_state_descriptor_invalid: number;
	entity_state_residency_invalid: number;
	entity_state_residency_lookup_failed: number;
	flow_duplicate_id: number;
	flow_end_without_start: number;
	flow_invalid_id: number;
	flow_no_enclosing_slice: number;
	flow_step_without_start: number;
	flow_without_direction: number;
	frame_timeline_event_parser_errors: number;
	frame_timeline_unpaired_end_event: number;
	ftrace_bundle_tokenizer_errors: number;
	ftrace_missing_event_id: number;
	ftrace_packet_before_tracing_start: number;
	ftrace_setup_errors: number;
	fuchsia_invalid_event: number;
	fuchsia_non_numeric_counters: number;
	fuchsia_timestamp_overflow: number;
	game_intervention_has_parse_errors: number;
	game_intervention_has_read_errors: number;
	gpu_counters_invalid_spec: number;
	gpu_counters_missing_spec: number;
	gpu_render_stage_parser_errors: number;
	graphics_frame_event_parser_errors: number;
	guess_trace_type_duration_ns: number;
	heap_graph_non_finalized_graph: number;
	heapprofd_missing_packet: number;
	heapprofd_non_finalized_profile: number;
	interned_data_tokenizer_errors: number;
	invalid_clock_snapshots: number;
	invalid_cpu_times: number;
	json_display_time_unit: number;
	json_parser_failure: number;
	json_tokenizer_failure: number;
	meminfo_unknown_keys: number;
	memory_snapshot_parser_failure: number;
	metatrace_overruns: number;
	mismatched_sched_switch_tids: number;
	misplaced_end_event: number;
	mm_unknown_type: number;
	network_trace_intern_errors: number;
	network_trace_parse_errors: number;
	ninja_parse_errors: number;
	packages_list_has_parse_errors: number;
	packages_list_has_read_errors: number;
	parse_trace_duration_ns: number;
	perf_samples_skipped: number;
	perf_samples_skipped_dataloss: number;
	power_rail_unknown_index: number;
	proc_stat_unknown_counters: number;
	process_tracker_errors: number;
	psi_unknown_resource: number;
	rss_stat_negative_size: number;
	rss_stat_unknown_keys: number;
	rss_stat_unknown_thread_for_mm_id: number;
	sched_switch_out_of_order: number;
	sched_waking_out_of_order: number;
	slice_out_of_order: number;
	sorter_push_event_out_of_order: number;
	stackprofile_invalid_callstack_id: number;
	stackprofile_invalid_frame_id: number;
	stackprofile_invalid_mapping_id: number;
	stackprofile_invalid_string_id: number;
	stackprofile_parser_error: number;
	symbolization_tmp_build_id_not_found: number;
	systrace_parse_failure: number;
	task_state_invalid: number;
	thread_time_in_state_out_of_order: number;
	thread_time_in_state_unknown_cpu_freq: number;
	tokenizer_skipped_packets: number;
	traced_buf: Record<string, number>[];
	traced_chunks_discarded: number;
	traced_data_sources_registered: number;
	traced_data_sources_seen: number;
	traced_final_flush_failed: number;
	traced_final_flush_succeeded: number;
	traced_flushes_failed: number;
	traced_flushes_requested: number;
	traced_flushes_succeeded: number;
	traced_patches_discarded: number;
	traced_producers_connected: number;
	traced_producers_seen: number;
	traced_total_buffers: number;
	traced_tracing_sessions: number;
	track_event_dropped_packets_outside_of_range_of_interest: number;
	track_event_parser_errors: number;
	track_event_thread_invalid_end: number;
	track_event_tokenizer_errors: number;
	truncated_sys_write_duration: number;
	unknown_extension_fields: number;
	v8_intern_errors: number;
	vmstat_unknown_keys: number;
	vulkan_allocations_invalid_string_id: number;
	winscope_sf_layers_parse_errors: number;
	winscope_sf_transactions_parse_errors: number;
	winscope_shell_transitions_parse_errors: number;
}
export interface TraceEvent {
	args: Args;
	cat: Cat;
	name: Name;
	ph: Ph;
	pid: number;
	tid: number;
	ts: number;
	s?: S;
	tts?: number;
	dur?: number;
	tdur?: number;
	id?: number | string;
	bp?: Bp;
	id2?: Id2;
	scope?: Cat;
}
export interface Args {
	name?: string;
	uptime?: string;
	frameSeqId?: number;
	layerTreeId?: number;
	chrome_message_pump?: ChromeMessagePump;
	src_file?: string;
	src_func?: string;
	chrome_mojo_event_info?: ChromeMojoEventInfo;
	data?: Data;
	layerId?: number;
	frameId?: number;
	tileData?: TileData;
	chrome_task_annotator?: ChromeTaskAnnotator;
	chrome_window_handle_event_info?: ChromeWindowHandleEventInfo;
	frame?: FrameEnum;
	file_name?: string;
	function_name?: string;
	source_location_iid?: number;
	beginData?: BeginData;
	endData?: EndData;
	fileName?: string;
	microtask_count?: number;
	elementCount?: number;
	chrome_raster_task?: ChromeRasterTask;
	hasPartialUpdate?: boolean;
	type?: ArgsType;
	usedHeapSizeAfter?: number;
	usedHeapSizeBefore?: number;
	epoch?: number;
	UseBackgroundThreads?: boolean;
	pixelRefId?: number;
	LazyPixelRef?: number;
	imageType?: ImageType;
	message?: Message;
	source?: string;
	snapshot?: string;
	chrome_frame_reporter?: ChromeFrameReporter;
	send_begin_mainframe_to_commit_breakdown?: Record<string, number>;
	chrome_renderer_scheduler_state?: ChromeRendererSchedulerState;
	state?: string;
	aborted_main?: number;
	no_damage_main?: number;
}
export interface BeginData {
	frame: FrameEnum;
	startLine?: number;
	url?: string;
	stackTrace?: StackTrace[];
	dirtyObjects?: number;
	partialLayout?: boolean;
	totalObjects?: number;
}
export enum FrameEnum {
	A0F3F70F3978Fd62209013A2720F9C6D = 'A0F3F70F3978FD62209013A2720F9C6D',
	B5F0974694Cbc89A228E79F129Ce5C16 = 'B5F0974694CBC89A228E79F129CE5C16',
	B9500Ff26125C60Ebd2B21044Cb2635F = 'B9500FF26125C60EBD2B21044CB2635F',
	Bb94Bffc5655B929Ec0D3308Aa6Ca65D = 'BB94BFFC5655B929EC0D3308AA6CA65D',
	C3C50310E517Aa63D120E58B8Ec04Fb3 = 'C3C50310E517AA63D120E58B8EC04FB3',
	D599De3Bb1C6F07Ab8562C61B02Fe349 = 'D599DE3BB1C6F07AB8562C61B02FE349',
	The1181C895Ba12685Cb3122F5C30Ab3Af1 = '1181C895BA12685CB3122F5C30AB3AF1',
	The136Fd68D06E2E593D7Efc897D9818Ab8 = '136FD68D06E2E593D7EFC897D9818AB8',
	The3Fef74Fa091D4B4E17Ac43Ebf7328Daa = '3FEF74FA091D4B4E17AC43EBF7328DAA',
	The5C63Ebc53Eca3Ff04De123905F28004D = '5C63EBC53ECA3FF04DE123905F28004D',
	The78126744E88574Bf713Dee67544954Ee = '78126744E88574BF713DEE67544954EE',
	The8D652Ed34Eba26Dd929Eb052B4705349 = '8D652ED34EBA26DD929EB052B4705349',
	The9B91F92498E46482A8E3B8Ef3363E1B2 = '9B91F92498E46482A8E3B8EF3363E1B2',
}
export interface StackTrace {
	columnNumber: number;
	functionName: string;
	lineNumber: number;
	scriptId: string;
	url: string;
}
export interface ChromeFrameReporter {
	affects_smoothness: boolean;
	frame_sequence: number;
	frame_source: number;
	has_compositor_animation: boolean;
	has_high_latency: boolean;
	has_main_animation: boolean;
	has_missing_content: boolean;
	has_smooth_input_main: boolean;
	layer_tree_host_id: number;
	scroll_state: ScrollState;
	state: ChromeFrameReporterState;
	high_latency_contribution_stage?: string[];
	frame_type?: FrameType;
}
export enum FrameType {
	Backfill = 'BACKFILL',
	Forked = 'FORKED',
}
export enum ScrollState {
	ScrollNone = 'SCROLL_NONE',
}
export enum ChromeFrameReporterState {
	StateDropped = 'STATE_DROPPED',
	StateNoUpdateDesired = 'STATE_NO_UPDATE_DESIRED',
	StatePresentedAll = 'STATE_PRESENTED_ALL',
	StatePresentedPartial = 'STATE_PRESENTED_PARTIAL',
}
export interface ChromeMessagePump {
	io_handler_location_iid: number;
}
export interface ChromeMojoEventInfo {
	data_num_bytes?: number;
	ipc_hash?: number;
	mojo_interface_method?: MojoInterfaceMethod;
	mojo_interface_tag?: string;
	payload_size?: number;
	watcher_notify_interface_tag?: string;
}
export interface MojoInterfaceMethod {
	native_symbol: NativeSymbol;
}
export interface NativeSymbol {
	mapping_id: number;
	rel_pc: number;
}
export interface ChromeRasterTask {
	source_frame_number: number;
}
export interface ChromeRendererSchedulerState {
	is_backgrounded?: boolean;
	is_hidden?: boolean;
	rail_mode?: string;
}
export interface ChromeTaskAnnotator {
	delay_policy: DelayPolicy;
	task_delay_us: number;
}
export enum DelayPolicy {
	FlexibleNoSooner = 'FLEXIBLE_NO_SOONER',
	Precise = 'PRECISE',
}
export interface ChromeWindowHandleEventInfo {
	hwnd_ptr: number;
	message_id: number;
}
export interface Data {
	frameId?: number;
	renderer_pid?: number;
	used_bytes?: number;
	frameTreeNodeId?: number;
	frames?: FrameElement[];
	persistentIds?: boolean;
	documentLoaderURL?: string;
	isLoadingMainFrame?: boolean;
	isOutermostMainFrame?: boolean;
	navigationId?: string;
	requestId?: string;
	needsBeginFrame?: number;
	frame?: FrameEnum;
	name?: string;
	processId?: number;
	url?: string;
	type?: DataType;
	priority?: Priority;
	requestMethod?: RequestMethod;
	encodedDataLength?: number;
	fromCache?: boolean;
	fromServiceWorker?: boolean;
	mimeType?: string;
	responseTime?: number;
	statusCode?: number;
	timing?: Record<string, number>;
	isMainFrame?: boolean;
	page?: FrameEnum;
	renderBlocking?: RenderBlocking;
	documents?: number;
	jsEventListeners?: number;
	jsHeapSizeUsed?: number;
	nodes?: number;
	decodedBodyLength?: number;
	didFail?: boolean;
	finishTime?: number;
	styleSheetUrl?: string;
	columnNumber?: number;
	lineNumber?: number;
	streamed?: boolean;
	readyState?: number;
	stackTrace?: StackTrace[];
	notStreamedReason?: NotStreamedReason;
	nodeId?: number;
	parent?: FrameEnum;
	layerTreeId?: number;
	clip?: number[];
	layerId?: number;
	height?: number;
	srcHeight?: number;
	srcWidth?: number;
	width?: number;
	x?: number;
	y?: number;
	functionName?: Bp;
	scriptId?: string;
	singleShot?: boolean;
	timeout?: number;
	timerId?: number;
	candidateIndex?: number;
	size?: number;
	id?: number | string;
	startTime?: number;
	cpuProfile?: CPUProfile;
	timeDeltas?: number[];
	lines?: number[];
	blockingDuration?: number;
	duration?: number;
	numScripts?: number;
	renderDuration?: number;
	styleAndLayoutDuration?: number;
	nodeName?: string;
	state?: DataState;
	compositeFailed?: number;
	unsupportedProperties?: string[];
}
export interface CPUProfile {
	nodes?: Node[];
	samples: number[];
}
export interface Node {
	callFrame: CallFrame;
	id: number;
	parent?: number;
}
export interface CallFrame {
	codeType: CodeType;
	functionName: string;
	scriptId: number;
	columnNumber?: number;
	lineNumber?: number;
	url?: string;
}
export enum CodeType {
	JS = 'JS',
	Other = 'other',
}
export interface FrameElement {
	frame: FrameEnum;
	name: string;
	processId: number;
	url: string;
}
export enum Bp {
	C = 'C',
	CheckReady = 'checkReady',
	E = 'e',
	Empty = '',
	EmptyFunc = 'EmptyFunc',
	EventListenerCallback = 'EventListenerCallback',
	G = 'g',
	GOnreadystatechange = 'g.onreadystatechange',
	H = 'H',
	Handler = 'handler',
	Hy = 'hy',
	Iy = 'iy',
	ObserveChildList = 'observe.childList',
	Onload = 'onload',
	Qy = 'Qy',
	S = 's',
	TimerCallback = 'TimerCallback',
	US = 'uS',
	WVtpGtmOnFailure = 'w.vtp_gtmOnFailure',
	WVtpGtmOnSuccess = 'w.vtp_gtmOnSuccess',
	X = 'X',
}
export enum NotStreamedReason {
	InlineScript = 'inline script',
}
export enum Priority {
	High = 'High',
	Low = 'Low',
	VeryHigh = 'VeryHigh',
}
export enum RenderBlocking {
	Blocking = 'blocking',
	NonBlocking = 'non_blocking',
	PotentiallyBlocking = 'potentially_blocking',
}
export enum RequestMethod {
	Get = 'GET',
	Post = 'POST',
}
export enum DataState {
	Running = 'running',
}
export enum DataType {
	Beforeunload = 'beforeunload',
	DOMContentLoaded = 'DOMContentLoaded',
	Error = 'error',
	Load = 'load',
	Pagehide = 'pagehide',
	Pageshow = 'pageshow',
	Readystatechange = 'readystatechange',
	Resize = 'resize',
	Text = 'text',
	Transitionend = 'transitionend',
	Unload = 'unload',
	Visibilitychange = 'visibilitychange',
	Webkitvisibilitychange = 'webkitvisibilitychange',
}
export interface EndData {
	endLine?: number;
	layoutRoots?: LayoutRoot[];
	nodeId?: number;
	nodeName?: string;
	rectilinear?: boolean;
	x?: number;
	y?: number;
	state?: EndDataState;
}
export interface LayoutRoot {
	depth: number;
	nodeId: number;
	quads: number[][];
}
export enum EndDataState {
	Finished = 'finished',
}
export enum ImageType {
	Avif = 'avif',
	Webp = 'webp',
}
export interface Message {
	content: string;
	url: string;
}
export interface TileData {
	layerId: number;
	sourceFrameNumber: number;
	tileId: TileID;
	tileResolution: TileResolution;
}
export interface TileID {
	id_ref: string;
}
export enum TileResolution {
	HighResolution = 'HIGH_RESOLUTION',
}
export enum ArgsType {
	AllocationFailure = 'allocation failure',
	Task = 'task',
}
export enum Cat {
	BaseToplevel = 'base,toplevel',
	BlinkAnimationsDevtoolsTimelineBenchmarkRail = 'blink.animations,devtools.timeline,benchmark,rail',
	BlinkConsole = 'blink.console',
	BlinkDevtoolsTimeline = 'blink,devtools.timeline',
	BlinkUserTiming = 'blink.user_timing',
	BlinkUserTimingRail = 'blink.user_timing,rail',
	CcBenchmarkDisabledByDefaultDevtoolsTimelineFrame = 'cc,benchmark,disabled-by-default-devtools.timeline.frame',
	CcDisabledByDefaultDevtoolsTimeline = 'cc,disabled-by-default-devtools.timeline',
	DevtoolsTimeline = 'devtools.timeline',
	DevtoolsTimelineDisabledByDefaultV8Gc = 'devtools.timeline,disabled-by-default-v8.gc',
	DevtoolsTimelineRail = 'devtools.timeline,rail',
	DevtoolsTimelineV8 = 'devtools.timeline,v8',
	DisabledByDefaultDevtoolsScreenshot = 'disabled-by-default-devtools.screenshot',
	DisabledByDefaultDevtoolsTimeline = 'disabled-by-default-devtools.timeline',
	DisabledByDefaultDevtoolsTimelineFrame = 'disabled-by-default-devtools.timeline.frame',
	DisabledByDefaultV8CPUProfiler = 'disabled-by-default-v8.cpu_profiler',
	LoadingRailDevtoolsTimeline = 'loading,rail,devtools.timeline',
	Metadata = '__metadata',
	Toplevel = 'toplevel',
	UIToplevel = 'ui,toplevel',
	V8DevtoolsTimeline = 'v8,devtools.timeline',
	V8DevtoolsTimelineDisabledByDefaultV8Compile = 'v8,devtools.timeline,disabled-by-default-v8.compile',
	V8Execute = 'v8.execute',
}
export interface Id2 {
	local: string;
}
export enum Name {
	ANGLEPlatformImplRunWorkerTask = 'ANGLEPlatformImpl::RunWorkerTask',
	ActivateLayerTree = 'ActivateLayerTree',
	Activation = 'Activation',
	Animation = 'Animation',
	BeginFrame = 'BeginFrame',
	BeginImplFrameToSendBeginMainFrame = 'BeginImplFrameToSendBeginMainFrame',
	BeginMainThreadFrame = 'BeginMainThreadFrame',
	BlinkSchedulerPerformMicrotaskCheckpoint = 'BlinkScheduler_PerformMicrotaskCheckpoint',
	CcSingleThreadTaskGraphRunnerRunTask = 'cc::SingleThreadTaskGraphRunner::RunTask',
	CcTaskGraphWorkQueueScheduleTasks = 'cc::TaskGraphWorkQueue::ScheduleTasks',
	ClosedMojoEndpoint = 'Closed mojo endpoint',
	Commit = 'Commit',
	CommitLoad = 'CommitLoad',
	CommitNavigationEnd = 'commitNavigationEnd',
	ConsoleMessageError = 'ConsoleMessage::Error',
	DOMComplete = 'domComplete',
	DOMContentLoadedEventEnd = 'domContentLoadedEventEnd',
	DOMContentLoadedEventStart = 'domContentLoadedEventStart',
	DOMInteractive = 'domInteractive',
	DOMLoading = 'domLoading',
	DecodeImage = 'Decode Image',
	DecodeLazyPixelRef = 'Decode LazyPixelRef',
	DrawFrame = 'DrawFrame',
	DrawLazyPixelRef = 'Draw LazyPixelRef',
	DroppedFrame = 'DroppedFrame',
	EndActivateToSubmitCompositorFrame = 'EndActivateToSubmitCompositorFrame',
	EndCommitToActivation = 'EndCommitToActivation',
	EvaluateScript = 'EvaluateScript',
	EventDispatch = 'EventDispatch',
	FbeventsEndEstPageViewProcessing = 'fbevents:end:estPageViewProcessing',
	FbeventsEndUnwantedDataProcessing1545967215651797 = 'fbevents:end:unwantedDataProcessing_1545967215651797',
	FbeventsEndValidateURLProcessing1545967215651797 = 'fbevents:end:validateUrlProcessing_1545967215651797',
	FbeventsStartEstPageViewProcessing = 'fbevents:start:estPageViewProcessing',
	FbeventsStartUnwantedDataProcessing1545967215651797 = 'fbevents:start:unwantedDataProcessing_1545967215651797',
	FbeventsStartValidateURLProcessing1545967215651797 = 'fbevents:start:validateUrlProcessing_1545967215651797',
	FetchStart = 'fetchStart',
	FireAnimationFrame = 'FireAnimationFrame',
	FirstContentfulPaint = 'firstContentfulPaint',
	FirstImagePaint = 'firstImagePaint',
	FirstMeaningfulPaintCandidate = 'firstMeaningfulPaintCandidate',
	FirstPaint = 'firstPaint',
	FrameCommittedInBrowser = 'FrameCommittedInBrowser',
	FrameDeletedInBrowser = 'FrameDeletedInBrowser',
	FrameStartedLoading = 'FrameStartedLoading',
	FunctionCall = 'FunctionCall',
	GPUTask = 'GPUTask',
	HTMLDocumentParserFetchQueuedPreloads = 'HTMLDocumentParser::FetchQueuedPreloads',
	HWNDMessageHandlerOnWndProc = 'HWNDMessageHandler::OnWndProc',
	HitTest = 'HitTest',
	IOHandlerOnIOCompleted = 'IOHandler::OnIOCompleted',
	ImageDecodeTask = 'ImageDecodeTask',
	ImageUploadTask = 'ImageUploadTask',
	IntersectionObserverControllerComputeIntersections = 'IntersectionObserverController::computeIntersections',
	InvalidateLayout = 'InvalidateLayout',
	LargestContentfulPaintCandidate = 'largestContentfulPaint::Candidate',
	LayerID = 'layerId',
	Layerize = 'Layerize',
	Layout = 'Layout',
	LoadEventEnd = 'loadEventEnd',
	LoadEventStart = 'loadEventStart',
	LongAnimationFrame = 'LongAnimationFrame',
	MarkDOMContent = 'MarkDOMContent',
	MarkLoad = 'MarkLoad',
	MinorGC = 'MinorGC',
	NavigationStart = 'navigationStart',
	NeedsBeginFrameChanged = 'NeedsBeginFrameChanged',
	Paint = 'Paint',
	PaintImage = 'PaintImage',
	ParallelScavengeStarted = 'Parallel scavenge started',
	ParseAuthorStyleSheet = 'ParseAuthorStyleSheet',
	ParseHTML = 'ParseHTML',
	PipelineReporter = 'PipelineReporter',
	PrePaint = 'PrePaint',
	PreloadRenderBlockingStatusChange = 'PreloadRenderBlockingStatusChange',
	ProcessName = 'process_name',
	ProcessUptimeSeconds = 'process_uptime_seconds',
	Profile = 'Profile',
	ProfileChunk = 'ProfileChunk',
	RasterTask = 'RasterTask',
	ReceiveCompositorFrameToStartDraw = 'ReceiveCompositorFrameToStartDraw',
	ReceiveMojoMessage = 'Receive mojo message',
	ReceiveMojoReply = 'Receive mojo reply',
	RendererAudioState = 'RendererAudioState',
	RendererPriority = 'RendererPriority',
	RendererProcessType = 'RendererProcessType',
	RendererVisibility = 'RendererVisibility',
	RequestAnimationFrame = 'RequestAnimationFrame',
	RequestMainThreadFrame = 'RequestMainThreadFrame',
	ResourceChangePriority = 'ResourceChangePriority',
	ResourceFinish = 'ResourceFinish',
	ResourceReceiveResponse = 'ResourceReceiveResponse',
	ResourceReceivedData = 'ResourceReceivedData',
	ResourceSendRequest = 'ResourceSendRequest',
	ResourceWillSendRequest = 'ResourceWillSendRequest',
	ResponseEnd = 'responseEnd',
	RunMicrotasks = 'RunMicrotasks',
	RunTask = 'RunTask',
	ScheduleStyleRecalculation = 'ScheduleStyleRecalculation',
	SchedulerRAILMode = 'Scheduler.RAILMode',
	Screenshot = 'Screenshot',
	SendBeginMainFrameToCommit = 'SendBeginMainFrameToCommit',
	SetLayerTreeID = 'SetLayerTreeId',
	SimpleURLLoaderBodyReaderMojoCallback = 'SimpleURLLoader_BodyReader mojo callback',
	SimpleWatcherOnHandleReady = 'SimpleWatcher::OnHandleReady',
	SingleThreadTaskGraphRunnerRunTaskWithLockAcquired = 'SingleThreadTaskGraphRunner::RunTaskWithLockAcquired',
	StartDrawToSwapStart = 'StartDrawToSwapStart',
	SubmitCompositorFrameToPresentationCompositorFrame = 'SubmitCompositorFrameToPresentationCompositorFrame',
	SubmitToReceiveCompositorFrame = 'SubmitToReceiveCompositorFrame',
	Swap = 'Swap',
	SwapEndToPresentationCompositorFrame = 'SwapEndToPresentationCompositorFrame',
	TaskGraphRunnerRunTask = 'TaskGraphRunner::RunTask',
	ThreadControllerImplRunTask = 'ThreadControllerImpl::RunTask',
	ThreadName = 'thread_name',
	ThreadPoolRunTask = 'ThreadPool_RunTask',
	TimerFire = 'TimerFire',
	TimerInstall = 'TimerInstall',
	TimerRemove = 'TimerRemove',
	TracingStartedInBrowser = 'TracingStartedInBrowser',
	TrackerValidation = 'TrackerValidation',
	UkmRecorderImplNotifyObserversWithNewEntry = 'UkmRecorderImpl::NotifyObserversWithNewEntry',
	UnloadEventEnd = 'unloadEventEnd',
	UnloadEventStart = 'unloadEventStart',
	UpdateCounters = 'UpdateCounters',
	UpdateLayer = 'UpdateLayer',
	UpdateLayoutTree = 'UpdateLayoutTree',
	V8BytecodeBudgetInterrupt = 'V8.BytecodeBudgetInterrupt',
	V8BytecodeBudgetInterruptWithStackCheck = 'V8.BytecodeBudgetInterruptWithStackCheck',
	V8Compile = 'v8.compile',
	V8GcBackgroundSafepoint = 'V8.GC_BACKGROUND_SAFEPOINT',
	V8GcBackgroundUnpark = 'V8.GC_BACKGROUND_UNPARK',
	V8GcBackgroundYoungArrayBufferSweep = 'V8.GC_BACKGROUND_YOUNG_ARRAY_BUFFER_SWEEP',
	V8GcHeapEpilogue = 'V8.GC_HEAP_EPILOGUE',
	V8GcHeapEpilogueReduceNewSpace = 'V8.GC_HEAP_EPILOGUE_REDUCE_NEW_SPACE',
	V8GcHeapEpilogueSafepoint = 'V8.GC_HEAP_EPILOGUE_SAFEPOINT',
	V8GcHeapExternalEpilogue = 'V8.GC_HEAP_EXTERNAL_EPILOGUE',
	V8GcHeapExternalPrologue = 'V8.GC_HEAP_EXTERNAL_PROLOGUE',
	V8GcHeapPrologue = 'V8.GC_HEAP_PROLOGUE',
	V8GcHeapPrologueSafepoint = 'V8.GC_HEAP_PROLOGUE_SAFEPOINT',
	V8GcMinorMSFinishSweepArrayBuffers = 'V8.GC_MINOR_MS_FINISH_SWEEP_ARRAY_BUFFERS',
	V8GcScavenger = 'V8.GC_SCAVENGER',
	V8GcScavengerBackgroundScavengeParallel = 'V8.GC_SCAVENGER_BACKGROUND_SCAVENGE_PARALLEL',
	V8GcScavengerCompleteSweepArrayBuffers = 'V8.GC_SCAVENGER_COMPLETE_SWEEP_ARRAY_BUFFERS',
	V8GcScavengerFreeRememberedSet = 'V8.GC_SCAVENGER_FREE_REMEMBERED_SET',
	V8GcScavengerScavenge = 'V8.GC_SCAVENGER_SCAVENGE',
	V8GcScavengerScavengeFinalize = 'V8.GC_SCAVENGER_SCAVENGE_FINALIZE',
	V8GcScavengerScavengeParallel = 'V8.GC_SCAVENGER_SCAVENGE_PARALLEL',
	V8GcScavengerScavengeParallelPhase = 'V8.GC_SCAVENGER_SCAVENGE_PARALLEL_PHASE',
	V8GcScavengerScavengeRoots = 'V8.GC_SCAVENGER_SCAVENGE_ROOTS',
	V8GcScavengerScavengeUpdateRefs = 'V8.GC_SCAVENGER_SCAVENGE_UPDATE_REFS',
	V8GcScavengerScavengeWeakGlobalHandlesIdentify = 'V8.GC_SCAVENGER_SCAVENGE_WEAK_GLOBAL_HANDLES_IDENTIFY',
	V8GcScavengerScavengeWeakGlobalHandlesProcess = 'V8.GC_SCAVENGER_SCAVENGE_WEAK_GLOBAL_HANDLES_PROCESS',
	V8GcScavengerSweepArrayBuffers = 'V8.GC_SCAVENGER_SWEEP_ARRAY_BUFFERS',
	V8GcTimeToSafepoint = 'V8.GC_TIME_TO_SAFEPOINT',
	V8HandleInterrupts = 'V8.HandleInterrupts',
	V8InvokeAPIInterruptCallbacks = 'V8.InvokeApiInterruptCallbacks',
	V8ParseOnBackground = 'v8.parseOnBackground',
	V8ParseOnBackgroundParsing = 'v8.parseOnBackgroundParsing',
	V8ParseOnBackgroundWaiting = 'v8.parseOnBackgroundWaiting',
	V8StackGuard = 'V8.StackGuard',
	XHRLoad = 'XHRLoad',
	XHRReadyStateChange = 'XHRReadyStateChange',
}
export enum Ph {
	B = 'B',
	D = 'D',
	E = 'e',
	F = 'f',
	I = 'I',
	M = 'M',
	N = 'N',
	O = 'O',
	P = 'P',
	PhB = 'b',
	PhN = 'n',
	R = 'R',
	S = 's',
	X = 'X',
}
export enum S {
	P = 'p',
	T = 't',
}
